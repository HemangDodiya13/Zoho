=> EMI Calculation CHeck it it can't be more than monthly income * 0.5

map validation_rule.EMI_Calculation_Check1(String crmAPIRequest)
{
entityMap = crmAPIRequest.toMap().get("record");
email = entityMap.get("Email");
emi_amount = ifnull(entityMap.get("Formula_1"),0).toDecimal();
monthy_income = ifnull(entityMap.get("Monthly_Income"),0).toDecimal();
income_50 = monthy_income * 0.5;
response = Map();
if(emi_amount > income_50)
{
	response.put('status','error');
	response.put('message','EMI cannot exceed 50% of monthly income');
}
else
{
	response.put('status','success');
}
return response;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=> loan Amount Restriction

map validation_rule.Loan_Amount_Restriction1(String crmAPIRequest)
{
entityMap = crmAPIRequest.toMap().get("record");
email = entityMap.get("Email");
loan_amount = entityMap.get("Loan_Amount_Requested");
monthly_income = ifnull(entityMap.get("Monthly_Income"),0).toDecimal();
info monthly_income;
amount = monthly_income * 40;
info amount;
response = Map();
if(loan_amount > amount)
{
	response.put('status','error');
	response.put('message','Loan amount exceeds permitted limit');
}
else
{
	response.put('status','success');
}
return response;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=> Processing Fees check it can not be more than 5% of approved amount 

map validation_rule.Processing_Fees_Verification1(String crmAPIRequest)
{
entityMap = crmAPIRequest.toMap().get("record");
process_fees = ifnull(entityMap.get("Processing_Fees"),0);
loan_amount = ifnull(entityMap.get("Loan_Amount_Approved"),0);
comparison_amount_5 = loan_amount * 5 / 100;
info comparison_amount_5;
response = Map();
if(process_fees < 0 || process_fees > comparison_amount_5)
{
	response.put('status','error');
	response.put('message','Invalid processing fee amount');
}
else
{
	response.put('status','success');
}
return response;
}