//code to add record in Creator using Widget and Fetching Lookup field value in Widget

<!DOCTYPE html>
<html>

<head>
    <title>Add Student Info</title>
    <script src="https://js.zohostatic.in/creator/widgets/version/1.0/widgetsdk-min.js"></script>
    <style>
        body {
            min-height: 100vh;
            margin: 0;
            font-family: 'Segoe UI', Arial, sans-serif;
            background: #e0d5c2;
            display: flex;
            justify-content: center;
            align-items: center;
            padding-top: 70px;
            padding-bottom: 70px;
            /* These two lines center the form vertically and horizontally */
        }

        .form-container {
            background: #fff;
            padding: 40px 36px 32px 36px;
            border-radius: 18px;
            box-shadow: 0 8px 32px rgba(54, 41, 36, 0.10);
            width: 550px;
            max-width: 96vw;
            border: 1.5px solid #d1c3b2;
            /* subtle border for a softer look */
        }

        h2 {
            text-align: center;
            color: #362924;
            font-size: 1.5rem;
            margin-bottom: 22px;
            font-weight: 700;
            letter-spacing: 0.5px;
        }

        label {
            display: block;
            margin-bottom: 7px;
            color: #362924;
            font-size: 1rem;
            font-weight: 500;
            letter-spacing: 0.2px;
        }

        input,
        select {
            width: 100%;
            padding: 10px 12px;
            font-size: 1rem;
            margin-bottom: 20px;
            border: 1.5px solid #d1c3b2;
            border-radius: 6px;
            background: #f9f6f2;
            transition: border-color 0.2s, box-shadow 0.2s;
            box-sizing: border-box;
            color: #362924;
        }

        input:focus,
        select:focus {
            border-color: #7e6d67;
            box-shadow: 0 0 0 2px #e0d5c2;
            outline: none;
            background: #fff;
        }

        input[disabled] {
            background: #e0d5c2;
            color: #7e6d67;
            cursor: not-allowed;
        }

        input[type="submit"] {
            background: #7e6d67;
            color: #fff;
            border: none;
            padding: 12px 0;
            font-size: 1.08rem;
            font-weight: 600;
            border-radius: 6px;
            cursor: pointer;
            transition: background 0.18s, box-shadow 0.18s;
            margin-top: 10px;
            box-shadow: 0 2px 8px rgba(54, 41, 36, 0.07);
            letter-spacing: 0.5px;
        }

        input[type="submit"]:hover {
            background: #362924;
            color: #e0d5c2;
        }

        .form-container p {
            text-align: center;
            font-size: 0.95rem;
            color: #7e6d67;
            margin-top: 14px;
        }

        .form-message {
            margin-bottom: 18px;
            padding: 12px 16px;
            border-radius: 6px;
            font-size: 1rem;
            text-align: center;
            font-weight: 500;
            letter-spacing: 0.2px;
        }

        .form-message.success {
            background: #e0d5c2;
            color: #362924;
            border: 1.5px solid #7e6d67;
        }

        .form-message.error {
            background: #fff0f0;
            color: #b91c1c;
            border: 1.5px solid #b91c1c;
        }
    </style>
</head>

<body>

    <div class="form-container">
        <h2>Vehicle Information Form</h2>

        <!-- Place this just above the form in your .form-container -->
        <div id="formMessage" class="form-message" style="display:none;"></div>

        <form id="vehicleForm">

            <label for="vehicleRegNo">Vehicle Registration Number</label>
            <input type="text" id="vehicleRegNo" name="Vehicle_Registration_Number" disabled required>

            <label for="vehicleModel">Vehicle Model</label>
            <input type="text" id="vehicleModel" name="Vehicle_Model" placeholder="Enter Vehicle Model" required>

            <label for="EMIAmount">EMI Amount</label>
            <input type="number" id="EMIAmount" name="EMI_Amount" placeholder="Enter EMI Amount">

            <label for="maintenanceCost">Maintenance Cost</label>
            <input type="number" id="maintenanceCost" name="Maintenance_Cost" placeholder="Enter Maintenance Cost">

            <label for="driver">Driver</label>
            <select id="driver" name="driver" required>
                <option value="">Select Driver</option>
            </select>

            <!-- Add this above the submit button -->


            <input type="submit" value="Submit">
        </form>
        <p>All fields marked with * are required.</p>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            ZOHO.CREATOR.init().then(function () {
                console.log("Zoho Creator Widget SDK Initialized");

                // Fetch Driver lookup data
                ZOHO.CREATOR.API.getAllRecords({
                    reportName: "All_Drivers", // Make sure this is your Driver report link name
                    page: 1,
                    pageSize: 200
                }).then(function (response) {
                    if (response.data && response.data.length > 0) {
                        const driverSelect = document.getElementById("driver");
                        response.data.forEach(function (driver) {
                            // Adjust the field names as per your app's response structure
                            let driverId = driver.ID || (driver.Driver_Name && driver.Driver_Name.ID);
                            let driverName = driver.Driver_Name && driver.Driver_Name.display_value
                                ? driver.Driver_Name.display_value
                                : (driver.Driver_Name || driver.Name || "Driver_Name");
                            if (driverId && driverName) {
                                const option = document.createElement("option");
                                option.value = driverId;
                                option.text = driverName;
                                driverSelect.appendChild(option);
                            }
                        });
                    }
                });

                document.getElementById("vehicleForm").addEventListener("submit", async function (event) {
                    event.preventDefault();

                    const config = {
                        appName: "trip",
                        formName: "Vehicle",
                        data: {
                            "data": {
                                "Vehicle_Model": document.getElementById("vehicleModel").value,
                                "EMI_Amount": document.getElementById("EMIAmount").value,
                                "Maintenance_Cost": document.getElementById("maintenanceCost").value,
                                "Driver_Vehicle": document.getElementById("driver").value, // Add Driver lookup value
                                "Vehicle_Registration_Number": document.getElementById("vehicleRegNo").value,
                            }
                        }
                    };

                    console.log(config);

                    ZOHO.CREATOR.API.addRecord(config).then(function (response2) {
                        if (response2.code === 3000) {
                            showMessage("success", "Record Added Successfully");
                            document.getElementById("vehicleForm").reset();
                            document.getElementById("vehicleRegNo").value = generateVehicleRegNo();
                        } else {
                            showMessage("error", "Something went wrong. Check console for details.");
                            console.error(response2);
                        }
                    });
                });

                document.getElementById("vehicleRegNo").value = generateVehicleRegNo();
            });
        });

        function generateVehicleRegNo() {
            const letters = String.fromCharCode(
                65 + Math.floor(Math.random() * 26),
                65 + Math.floor(Math.random() * 26)
            );
            const numbers = Math.floor(1000 + Math.random() * 9000); // 4 digits
            return `GJ10${letters}${numbers}`;
        }

        function showMessage(type, text) {
            const msgDiv = document.getElementById("formMessage");
            msgDiv.className = "form-message " + type;
            msgDiv.textContent = text;
            msgDiv.style.display = "block";
            setTimeout(() => {
                msgDiv.style.display = "none";
            }, 3500);
        }
    </script>

</body>

</html>


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//Code to Create record in CRM Subform thorough widget and product filter by catagory

<!DOCTYPE html>
<html>

<head>
  <script src="https://live.zwidgets.com/js-sdk/1.2/ZohoEmbededAppSDK.min.js"></script>
  <meta charset="UTF-8">
</head>

<body>
  <h1 style="text-align: center; padding-bottom: 10px;">Add Products</h1>

  <div id="productList" style="margin-top: 15px;"></div>

  <script>
    let allProducts = [];
    let parentRecordId = null;
    let subformName = "Products_Form";
    let lookupFieldAPI = "Products_Lookup";

    ZOHO.embeddedApp.on("PageLoad", function (data) {
      console.log("PageLoad data:", data);
      parentRecordId = data.EntityId;

      ZOHO.CRM.API.getAllRecords({
        Entity: "Products",
        sort_order: "asc",
        per_page: 100,
        page: 1
      }).then(function (response) {
        const product_Details = response.data;

        if (product_Details && product_Details.length > 0) {
          allProducts = product_Details.map(product => ({
            id: product.id,
            name: product.Product_Name,
            category: product.Product_Category,
            price: product.Unit_Price
          }));

          showcategory_Dropdown(allProducts);
        } else {
          document.getElementById("productList").innerHTML = "<p>No products found in the Products module.</p>";
        }
      }).catch(function (error) {
        console.error("Error fetching products:", error);
        document.getElementById("productList").innerHTML = "<p>Error fetching products. Please try again later.</p>";
      });
    });


    function showcategory_Dropdown(products) {
      const productListDiv = document.getElementById("productList");
      productListDiv.innerHTML = "";

      const uniqueCategories = [...new Set(products.map(product => product.category))];

      // Category Dropdown
      const category_Container = document.createElement("div");
      category_Container.style = "width: 100%; text-align: center; margin-bottom: 20px;";

      const category_Label = document.createElement("label");
      category_Label.textContent = "Category";
      category_Label.style = "display: block; margin-bottom: 10px; text-align: center; font-weight: bold; font-size: 25px";
      category_Container.appendChild(category_Label);

      const category_Dropdown = document.createElement("select");
      category_Dropdown.id = "category-select";
      category_Dropdown.style = "width: 50%; padding: 8px;";
      category_Dropdown.innerHTML = `
        <option value="">-None-</option>
        ${uniqueCategories.map(category => `<option value="${category}">${category}</option>`).join("")}
      `;
      category_Container.appendChild(category_Dropdown);
      productListDiv.appendChild(category_Container);

      // Product Dropdown
      const productContainer = document.createElement("div");
      productContainer.style = "width: 100%; text-align: center; margin-bottom: 20px;";

      const productLabel = document.createElement("label");
      productLabel.textContent = "Product";
      productLabel.style = "display: block; margin-bottom: 5px; font-weight: bold; font-size: 25px";
      productContainer.appendChild(productLabel);

      const product_Dropdown = document.createElement("select");
      product_Dropdown.id = "product-select";
      product_Dropdown.style = "width: 50%; padding: 8px;";
      product_Dropdown.innerHTML = `<option value="">-None-</option>`;
      productContainer.appendChild(product_Dropdown);
      productListDiv.appendChild(productContainer);

      // Price Input
      const price_Container = document.createElement("div");
      price_Container.style = "width: 100%; text-align: center; margin-bottom: 20px;";

      const price_Label = document.createElement("label");
      price_Label.textContent = "Price";
      price_Label.style = "display: block; margin-bottom: 10px; text-align: center; font-weight: bold; font-size: 25px";
      price_Container.appendChild(price_Label);

      const priceInput = document.createElement("input");
      priceInput.type = "number";
      priceInput.id = "product-price";
      priceInput.placeholder = "Price";
      priceInput.style = "width: 50%; padding: 8px;";
      price_Container.appendChild(priceInput);
      productListDiv.appendChild(price_Container);

      //Quantity
      const quantity_Container = document.createElement("div");
      quantity_Container.style = "width: 100%; text-align: center; margin-bottom: 20px;";

      const quantity_Label = document.createElement("label");
      quantity_Label.textContent = "Quantity";
      quantity_Label.style = "display: block; margin-bottom: 10px; text-align: center; font-weight: bold; font-size: 25px";
      quantity_Container.appendChild(quantity_Label);

      const quantityInput = document.createElement("input");
      quantityInput.type = "number";
      quantityInput.id = "product-quantity";
      quantityInput.placeholder = "Quantity";
      quantityInput.style = "width: 50%; padding: 8px;";
      quantity_Container.appendChild(quantityInput);
      productListDiv.appendChild(quantity_Container);

      //Discount
      const discount_Container = document.createElement("div");
      discount_Container.style = "width: 100%; text-align: center; margin-bottom: 20px;";

      const discount_Label = document.createElement("label");
      discount_Label.textContent = "Discount";
      discount_Label.style = "display: block; margin-bottom: 10px; text-align: center; font-weight: bold; font-size: 25px";
      discount_Container.appendChild(discount_Label);

      const discountInput = document.createElement("input");
      discountInput.type = "number";
      discountInput.id = "product-discount";
      discountInput.placeholder = "Discount %";
      discountInput.style = "width: 50%; padding: 8px;";
      discount_Container.appendChild(discountInput);
      productListDiv.appendChild(discount_Container);

      //Total Amount
      const total_amount_Container = document.createElement("div");
      total_amount_Container.style = "width: 100%; text-align: center; margin-bottom: 20px;";

      const total_amount_Label = document.createElement("label");
      total_amount_Label.textContent = "Total Amount";
      total_amount_Label.style = "display: block; margin-bottom: 10px; text-align: center; font-weight: bold; font-size: 25px";
      total_amount_Container.appendChild(total_amount_Label);

      const totalAmountInput = document.createElement("input");
      totalAmountInput.type = "number";
      totalAmountInput.id = "product-total-amount";
      totalAmountInput.placeholder = "Total Amount";
      totalAmountInput.style = "width: 50%; padding: 8px;";
      total_amount_Container.appendChild(totalAmountInput);
      productListDiv.appendChild(total_amount_Container);



      // Category selection change
      category_Dropdown.addEventListener("change", function () {
        const selectedCategory = this.value;
        if (selectedCategory) {
          const filteredProducts = allProducts.filter(product => product.category === selectedCategory);
          product_Dropdown.innerHTML = `
            <option value="">-None-</option>
            ${filteredProducts.map(product => `<option value="${product.id}">${product.name}</option>`).join("")}
          `;
        } else {
          product_Dropdown.innerHTML = `<option value="">-None-</option>`;
        }
      });

      // Product Price Auto Populate
      product_Dropdown.addEventListener("change", function () {
        const selectedProductId = this.value;
        const selectedProduct = allProducts.find(product => product.id === selectedProductId);
        priceInput.value = selectedProduct && selectedProduct.price ? selectedProduct.price : "";
      });

      //Total Amount Calculation
      function calculateTotal() {
        const price = parseFloat(priceInput.value) || 0;
        const quantity = parseFloat(quantityInput.value) || null;
        const discount = parseFloat(discountInput.value) || null;

       if(discount <= 0){
          const total = price * quantity;
         totalAmountInput.value = total.toFixed(2);

        }
        else
        {
          const total = price * quantity - (price * quantity * discount/100);
         totalAmountInput.value = total.toFixed(2);

        }
      }


      [priceInput, quantityInput, discountInput].forEach(input =>
        input.addEventListener("input", calculateTotal)
      );


      // Submit Button
      const buttonContainer = document.createElement("div");
      buttonContainer.style = "width: 100%; text-align: center; margin-top: 10px;";

      const addButton = document.createElement("button");
      addButton.innerText = "Submit";
      addButton.style = "padding: 8px 16px; font-size: 16px; font-weight: bold";

      addButton.onclick = function () {
        const selectedProductId = product_Dropdown.value;
        const selectedCategory = category_Dropdown.value;

        if (selectedProductId && selectedCategory) {
          const selectedProduct = allProducts.find(product => product.id === selectedProductId);
          fetchAndAddProduct(selectedProductId, selectedProduct.name, selectedCategory);
        }else {
          alert("Please select both Category and Product"); 
        }
      };

      buttonContainer.appendChild(addButton);
      productListDiv.appendChild(buttonContainer);
    }

    // Submit handler
    function fetchAndAddProduct(productId, productName, category) {
      const price = document.getElementById("product-price").value;

      if (!parentRecordId) {
        alert("Deal ID not found. Please reload.");
        return;
      }

      const record = {
        [lookupFieldAPI]: productId,
        Category: category,
        Price: parseFloat(price)
      };

      ZOHO.CRM.API.insertSubformRecord({
        Entity: "Deals",
        RecordID: parentRecordId,
        Subform: subformName,
        Data: [record]
      }).then(function (response) {
        if (response.data && response.data[0].code === "SUCCESS") {
          alert(`${productName} added to the Deal!`);
        } else {
          console.error("Insert failed:", response);
          alert("Failed to add product. Check API names.");
        }
      }).catch(function (error) {
        console.error("Error inserting subform:", error);
        alert("Error while adding product.");
      });
    }

    ZOHO.embeddedApp.init();
  </script>

</body>

</html>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//Code to export CSV File into CRM and Create meetings


<!DOCTYPE html>
<html lang="en">

<head>
    <script src="https://live.zwidgets.com/js-sdk/1.2/ZohoEmbededAppSDK.min.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Import Meetings</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        h2 {
            color: #333;
        }

        a {
            text-decoration: none;
            color: blue;
            display: block;
            margin-bottom: 10px;
        }

        input[type="file"] {
            margin: 10px 0;
        }

        button {
            background-color: black;
            color: white;
            border: none;
            padding: 10px 15px;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        .success {
            margin-top: 15px;
            font-weight: bold;

        }

        .error {
            margin-top: 15px;
            font-weight: bold;

        }
    </style>
</head>

<body>

    <h2>Import Meetings</h2>
    <a href="Meeting_CSV_Template.csv" download>Download CSV Template</a>
    <p>Select a file:</p>
    <input type="file" id="fileInput">
    <button id="submitBtn">Submit</button>

    <p id="successMsg" class="success" style="display: none;">Meetings Imported</p>
    <p id="errorMsg" class="error" style="display: none;">Error: Import Failed</p>

    <script>

        ZOHO.embeddedApp.on("PageLoad", function (data) {
            console.log("Zoho Page Data:", data);
            ZOHO.embeddedApp.init().then(() => {
                console.log("Zoho SDK Initialized Successfully");
            }).catch(err => console.error("Zoho SDK Initialization Failed:", err));
        });

        document.getElementById("submitBtn").addEventListener("click", function () {
            const fileInput = document.getElementById("fileInput");
            if (fileInput.files.length === 0) {
                alert("Please select a CSV file before submitting.");
                return;
            }

            const file = fileInput.files[0];
            const reader = new FileReader();
            reader.onload = function (event) {
                processCSV(event.target.result);
            };
            reader.readAsText(file);
        });


        function processCSV(csvData) {
            ZOHO.embeddedApp.init().then(() => {
                console.log("Zoho SDK Ready - Processing CSV...");

                const lines = csvData.split("\n").map(line => line.trim()).filter(line => line);
                if (lines.length < 2) {
                    showError("Error: CSV file is empty or formatted incorrectly.");
                    return;
                }

                for (let i = 1; i < lines.length; i++) {
                    const data = lines[i].split(",").map(d => d.trim());

                    let eventTitle = data[0] && data[0].trim() ? data[0].trim() : "Untitled Meeting";

                    if (!eventTitle) {
                        console.error(`Skipping row ${i}: Event_Title is missing.`);
                        continue;
                    }

                    let meetingData = {
                        
                        "Event_Title": (data[0]),
                        "Start_DateTime": (data[1]),
                        "End_DateTime": (data[2])

                    };


                    console.log(`Row ${i} - Final Data Sent to API:`, JSON.stringify(meetingData, null, 2));

                    ZOHO.CRM.API.insertRecord({ Entity: "Events", APIData: meetingData })
                        .then(response => handleResponse(response, i))
                        .catch(error => showError(`Error in Row ${i}: API Request Failed`, error));

                    
                }
            }).catch(error => {
                console.error("Zoho SDK Initialization Error:", error);
                showError("Zoho SDK failed to initialize. Please try again.");
            });
        }



        function handleResponse(response, row) {
            console.log(`Row ${row} - API Response:`, response);

            if (response.data && response.data[0].code === "SUCCESS") {
                document.getElementById("successMsg").style.display = "block";
            } else {
                let errorMessage = `Error in Row ${row}: ${response.data[0].message}`;
                console.error("API Response Error:", JSON.stringify(response, null, 2));
                showError(errorMessage);
            }
        }

        function showError(message, error = null) {
            document.getElementById("errorMsg").innerText = message;
            document.getElementById("errorMsg").style.display = "block";
            if (error) console.error("Full API Error:", JSON.stringify(error, null, 2));
        }



        function formatDate(inputDate) {
            if (!inputDate) return null;
            let date = new Date(inputDate);
            return isNaN(date.getTime()) ? null : date.toISOString();
        }


    </script>
</body>

</html>